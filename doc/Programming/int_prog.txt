int_prog.txt
Documentation Date:1999-11-1

這篇文件是用於說明如何撰寫 Taunix 的中斷處理程式


Taunix 的中斷處理程式必須完全依照 TI C compiler 的規劃來寫，TI C compiler
中支援 10 個關鍵字：c_int0() 到 c_int9() 一共十個函式，可用來撰寫中斷處理
程式。這十個函式與一般的函是最大的不同點，是在於當程式進入到 c_int?() 時，
編譯器會先將 CPU core 的所有暫存器儲存到 data stack 中，再設定函式要用的
堆疊區域，同時還會將 DSP 的中斷給暫停掉；而要離開前，編譯器會自動的加入回復
CPU core 所有暫存器的值，並將中斷打開。以 Taunix 的觀點而言，整個中斷處理
程式是必須在 critical section 中執行的。

在撰寫中斷處理程式時，有幾點是必須要注意的：第一個就是資料完整性的問題。
中斷發生的時間通常程式是無法控制或預知的，所以當中斷發生時，很有可能應用
程式正在修改某些資料，此時如果中斷處理程式也同時去修改同一個記憶體區塊的
話，那資料完整性的問題就必須要考慮。

第二個，Taunix 規劃有一個中斷旗標: int_flag，是用於指示系統是否正處於中斷
處理程式內，而這個旗標會影響 resume() 的運作。在先前的測試中，曾發現如果在
中斷裡 resume 一個工作的話，會很容易導致 DSP 發生 reset，原因不明，但可能
是硬體堆疊的問題，但是，基本上 C compiler 會處理 stack 的問題，所以我並不
清楚是為何會發生 reset。但後來發現，只要延後 resume() 的 resched() 動作，
問題就可以得到解決。因此新的設計，若是在中斷裡使用 resume()，並不會立即
執行 resched()，相對的，會將 sched_flag 設成 SCHED_DELAYED，延遲排程，所以
當中斷處理程式要離開前，必須要檢查 sched_flag 是否為 SCHED_DELAYED，若是，
則必須叫用 resched() 一次以重新排程。

下面是 Taunix 中斷處理程式的概略範例：

void c_int1()
{
	ISR_ENTRY		/* 設定進入中斷 */

	/* 這裡即是中斷處理程式的內容 */

	ISR_EXIT		/* 準備離開中斷 */

	if (sched_flag == SCHED_DELAYED) { /* 如果上述程式用過resume()，就
                                              必須加以下的程式 */
		/* 通常回呼函式裡是很有可能用到resume()的 */
		enable_sched;  /* 啟動重新排程 */
		/*
		 當完成重新排成而曾發生 switch_task 的話，當切換回此處時，
                 中斷會被打開，但後面還有 CPU core 的 context 要 restore，
                 因此必須要再暫停中斷 
		*/
		disable_int;	
	}
}
