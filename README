Taunix-0.7.4-alpha4
Date:1999-10-31

	經過長時間的等候，終於Taunix-0.7.4版大致底定。之所以會用掉這麼多時間，當然跟作者本人平
日有修課的負擔，不能像開發第一版的Taunix時那麼全神灌注，第二就是0.7.4版增加了對x243的支援。
TI的243 DSP雖然是與240大致上是相容的，但小部份的不同卻導致了問題，大部分的時間是花在相容性
的測試上，同時修正一些由來已久的bugs、重新設計並驗證IPC方面的程式碼....等等。但是0.7.4版是在
243上進行開發與測試的，但此時我已沒有240的EVM板可再測試程式碼，儘管0.7.4的程式碼是從0.7.3來的
，但畢竟還沒有在240上測試過。

	Taunix-0.7.4版的修正與功能方面的增強如下：

1.修正SCI非同步運作時會導致DSP reset的bug:
	主要問題出在resched()內切換工作時，switch_task()未受到critical section的保護，而切換到
	錯誤的區段等致發生NMI，進而reset。修正的方法是將switch_task()納入disable_int/enable_int
	的critical section內，但由於這麼做會導致新生的工作無法enable中斷，於是依照原本TI C
	library的設計重寫longjmp，並在ret指令之前，加進clrc INTM以使已在執行的工作與新生的工作
	均可正常執行。

2.修改中斷程式的處理原則，與resched()及resume()對中斷程式的處理
	增加int_flag旗標，以判斷目前DSP CPU core是否在中斷程式內。如果在中斷程式內使用resume()
	，這通常發生在回呼函式內，resume()並不會立即呼叫resched()，而是把sched_flag設成
	SCHED_DELAYED，於是中斷程式在離開前，必須先檢查是有否延遲排程的旗標，已決定離開中斷前是
	否須要重新排程。

3.增加週期性工作的支援
	0.7.4中增加了at模組，模擬UNIX下的at daemon與at指令，用於定時執行指定的程式。atd()設計成
	泛用型計時器的回呼函式的形式，因此可在系統初設時指定給某一個計時器進行回呼，或者是在real-
	time clock 中斷內直接叫用。而週期性工作的指定可在初設時設定ATTAB---at table，或是執行期
	使用at()函式，設定新的週期性工作。

4.改良並修正pipe/msgq的設計
	IPC的機制除原本的pipe外，再利用pipe形成每一個工作的message queue，訊息佇列，同時修正
	pipe中資料維持的錯誤。

5.加入priList(prioirty list)模組，並重新設計sleep/sem模組
	原本的sleep模組與sem(semaphore)模組，其最主要的資料結構---串列，是各自維護的，並沒有共用
	程式碼，在0.7.4中統一利用priList模組去實作differential list(sleep模組)與一般性的priority
	list(sem模組)，使得兩個模組在資料結構的維護上，可保持一致性。

	以上三部份的程式碼的驗證其實是在我的Jupiter工作站上進行的，由於三個模組本身而言與硬體的相
	關性不高，是可以與DSP分開來發展的，而當時正好240EVM板不在手邊，新的243板又尚未完成的情形
	下，便利用安裝LinuxPPC的Jupiter工作站進行程式碼的驗證及設計，並利用Linux上的除錯工具xxgdb
	進行除錯，雖然並不像Trubo debugger方便，但比起Code Composer再加DSP板才能進行測試，還是方
	便許多，至少我可以在螢幕上將資料結構的內容整個dump出來，而DSP板只有幾個LED燈而已。
	
6.加入static SECS-I的支援
	原本的SECS通訊協定的記憶體使用是使用動態配置的，為考慮動態配置，會在執行期花費較多的指令週
	期，於是更改為靜態的記憶體配置，及配合IPC機制進行工作與secs daemon的資料交換。

7.增加對x243的支援
	Taunix version 0.7.4版整個均是在x243的板子上進行測試(thanks to PIGOIL)，雖然TI是宣稱243
	與240完全相容，但在設計核心的角度上來看，細微的不同卻非常容易導致導致DSP發生NMI並進一步
	reset。儘管，x243與x240的差異性大部分由核心及各週邊驅動程式所覆蓋，但是幾個地方還是要注意

	(1)x243沒有可調整的鎖相迴路設計
		x240尚可使用PLLLOCK巨集調整DSP內的CPU及系統時脈，但是x243卻是固定的，x243上對應x240
		為ckcr0及ckcr1的地方，是不能存取的，否則將會發生NMI。故x243的內部時脈就只能固定在20
		MHz。
	(2)x243沒有即時時鐘中斷
		x243有看門狗，但卻沒有即時時鐘可用來於固定時間中斷DSP CPU core，並進行看門狗重設的中斷
		源，也就是說，如果想要有即時時鐘的服務，得另外想辦法。
		Taunix for x243的設計是利用一個外部中斷:XINT1當作即時時鐘中斷，而中斷的訊號源，則必須
		由外部額外拉進來，比方說，我在設計階段是利用第二個計時器的compare output產生一個週期性
		的pulse，並用跳線拉到x243上的XINT1接腳。當然，也可以增加額外的電路以產生一個週期脈衝，
		來模擬即時時鐘，不過這些都應該是在你的目標應用上需要即時時鐘的服務才需要的。

		如果沒有即時時鐘中斷，會受到影響而無法運作的模組有: sleep, static SECS-I, sys_time
		結構體。如果在實際的運用上用不到這些模組的話，沒有即時時鐘中斷是沒有關係的。

		當然，你可以選擇使用泛用型計時器，但是...
	(3)x243只有兩個泛用型計時器，x240有三個
		因此，x240的程式如果有使用到第三個計時器的話，是不能直接port到x243上的。
	(4)x243的ADC外部的channel有八組，x240有十六組
		同樣的，如果原本的240程式會用到相當多的ADC channel，也是不能直接port到x243上的。
	(5)x243的capture unit有三個，x240有四個
		也是要注意的地方。

	其他大致上Taunix for x240與x243是相同的。還有一點，x243上是內建CAN Bus controller，Taunix
0.7.4 for x243目前尚未完成CAN Bus driver，建龍，加油，靠你了！

	除了核心程式本身之外，Taunix的前端程式產生器TaunixFE，目前仍是搭配version 0.7.3 for x240使
用，用於version 0.7.4 for x240應該是可以的，但由於Taunix for x243在許多地方有所改變，因此目前版
本的TaunixFE並不能直接使用在Taunix for x243。

	在文件方面，將逐漸進行一項TDP:Taunix Documentation Project。雖然Taunix fro x240已有部分的
文件，但由於這次的改版，部分的資料可能會不正確，而使得有必要重新檢視以前的文件，並進行有計劃的
分類與整理。


還有什麼有待改進的呢？
	目前最重要的就是文件的建立，就算前端程式產生器沒有完成，但至少有文件可看，有範例可參考，程式
還寫得下去，所以文件是第一要務。

	第二個就是確定所有驅動程式的介面，也就是所謂的switch table介面，因為介面固定了，文件也自然
就能固定。同時確立介面後，規劃已久的TVFS:Taunix Virtual File System模組才能架得上去，以支援未來
版本的Taunix:核心與工作可分開編譯及分別上載至DSP的目的，甚至可動態的載入週邊驅動程式，而不必像
現在，必須所有的程式全部編譯成一個.out檔後上載至DSP執行。

	此外，第三個就是TaunixFE的開發，穩定的核心加上方便使用的程式開發工具，才能大幅縮短TTM:
Time To Market。

	最後，感謝PIGOIL提供x243的原型機版，並實際運用Taunix在其電動機車的計劃上。

Max Yin in Tau Workshop
E-mail: maxyin@alumni.nctu.edu.tw
	   u8812521@cc.nctu.edu.tw
